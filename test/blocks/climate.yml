---
climate:
  application_init:
    - twr_module_climate_init();
    - twr_module_climate_set_event_handler(climate_module_event_handler, NULL);
    - twr_module_climate_set_update_interval_thermometer({UPDATE_INTERVAL});
    - twr_module_climate_set_update_interval_hygrometer({UPDATE_INTERVAL});
    - twr_module_climate_set_update_interval_lux_meter({UPDATE_INTERVAL});
    - twr_module_climate_set_update_interval_barometer({UPDATE_INTERVAL});
    - twr_module_climate_measure_all_sensors();
  handler:
    declaration: void climate_module_event_handler(twr_module_climate_event_t event, void *event_param)
    events:
      prefix: TWR_MODULE_CLIMATE_EVENT_UPDATE_
      enum: 
        THERMOMETER:
          - float value;
          - if (twr_module_climate_get_temperature_celsius(&value)) {   
          - climate_temperature_value = value;
          - '}'
        HYGROMETER:
          - float value;
          - if (twr_module_climate_get_humidity_percentage(&value)) {
          - climate_humidity_value = value;
          - '}'
        LUX_METER:
          - float value;
          - if (twr_module_climate_get_illuminance_lux(&value)) {
          - if (value < 1) {
          - value = 0;
          - '}'
          - climate_illuminance_value = value;
          - '}'
        BAROMETER:
          - float value;
          - if (twr_module_climate_get_pressure_pascal(&value)) {
          - float meter;
          - if (!twr_module_climate_get_altitude_meter(&meter)) {
          - return;
          - '}'
          - climate_pressure_value = value;
          - '}'
        